
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AlbumScalarFieldEnum = {
  id: 'id',
  album_name: 'album_name'
};

exports.Prisma.Album_authorScalarFieldEnum = {
  id: 'id',
  author_id: 'author_id',
  album_id: 'album_id'
};

exports.Prisma.PlayhistoryScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  song_played: 'song_played',
  date: 'date',
  score: 'score',
  user_recording: 'user_recording'
};

exports.Prisma.PlaylistScalarFieldEnum = {
  id: 'id',
  user_created: 'user_created',
  playlist_name: 'playlist_name',
  description: 'description',
  total_time_played: 'total_time_played',
  total_view: 'total_view'
};

exports.Prisma.Playlist_songScalarFieldEnum = {
  id: 'id',
  playlist_id: 'playlist_id',
  song_id: 'song_id'
};

exports.Prisma.SongScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  view: 'view',
  time_played: 'time_played',
  key: 'key',
  tempo: 'tempo',
  genre: 'genre',
  year_publish: 'year_publish',
  album: 'album'
};

exports.Prisma.Song_authorScalarFieldEnum = {
  id: 'id',
  author_id: 'author_id',
  song_id: 'song_id'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password_hash: 'password_hash',
  playlists_created: 'playlists_created',
  token: 'token'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.albumOrderByRelevanceFieldEnum = {
  album_name: 'album_name'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.playhistoryOrderByRelevanceFieldEnum = {
  user_recording: 'user_recording'
};

exports.Prisma.playlistOrderByRelevanceFieldEnum = {
  playlist_name: 'playlist_name',
  description: 'description'
};

exports.Prisma.songOrderByRelevanceFieldEnum = {
  name: 'name',
  content: 'content',
  key: 'key',
  tempo: 'tempo',
  genre: 'genre'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  username: 'username',
  password_hash: 'password_hash',
  token: 'token'
};


exports.Prisma.ModelName = {
  album: 'album',
  album_author: 'album_author',
  playhistory: 'playhistory',
  playlist: 'playlist',
  playlist_song: 'playlist_song',
  song: 'song',
  song_author: 'song_author',
  user: 'user'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\xampp\\htdocs\\CodeBase\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "extendedIndexes"
    ],
    "sourceFilePath": "C:\\xampp\\htdocs\\CodeBase\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"extendedIndexes\"]\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel album {\n  id                     Int            @id @default(autoincrement())\n  album_name             String         @db.VarChar(255)\n  album_author           album_author[]\n  song_song_albumToalbum song[]         @relation(\"song_albumToalbum\")\n}\n\nmodel album_author {\n  id        Int   @id @default(autoincrement())\n  author_id Int\n  album_id  Int\n  user      user  @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: \"album_author_ibfk_1\")\n  album     album @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: \"album_author_ibfk_2\")\n\n  @@index([album_id], map: \"album_id\")\n  @@index([author_id], map: \"author_id\")\n}\n\nmodel playhistory {\n  id             Int      @id @default(autoincrement())\n  user_id        Int\n  song_played    Int\n  date           DateTime @db.DateTime(0)\n  score          Decimal? @db.Decimal(10, 0)\n  user_recording String?  @db.Text\n  user           user     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: \"playhistory_ibfk_1\")\n  song           song     @relation(fields: [song_played], references: [id], onUpdate: Restrict, map: \"playhistory_ibfk_2\")\n\n  @@index([user_id], map: \"playhistory_ibfk_1\")\n  @@index([song_played], map: \"playhistory_ibfk_2\")\n}\n\nmodel playlist {\n  id                Int             @id @default(autoincrement())\n  user_created      Int\n  playlist_name     String          @db.VarChar(255)\n  description       String?         @db.Text\n  total_time_played Int?            @default(0)\n  total_view        Int?            @default(0)\n  user              user            @relation(fields: [user_created], references: [id], onUpdate: Restrict, map: \"playlist_ibfk_1\")\n  playlist_song     playlist_song[]\n\n  @@index([id, user_created], map: \"idx_playlist_id_user_created\")\n  @@index([user_created], map: \"playlist_ibfk_1\")\n}\n\nmodel playlist_song {\n  id          Int      @id @default(autoincrement())\n  playlist_id Int\n  song_id     Int\n  playlist    playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: \"playlist_song_ibfk_1\")\n  song        song     @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: \"playlist_song_ibfk_2\")\n\n  @@index([playlist_id], map: \"playlist_id\")\n  @@index([song_id], map: \"song_id\")\n}\n\nmodel song {\n  id                      Int             @id @default(autoincrement())\n  name                    String          @db.VarChar(255)\n  content                 String          @db.Text\n  view                    Int?            @default(0)\n  time_played             Int?            @default(0)\n  key                     String?         @db.VarChar(255)\n  tempo                   String?         @db.VarChar(255)\n  genre                   String?         @db.VarChar(255)\n  year_publish            Int?\n  album                   Int?\n  playhistory             playhistory[]\n  playlist_song           playlist_song[]\n  album_song_albumToalbum album?          @relation(\"song_albumToalbum\", fields: [album], references: [id], onDelete: Restrict, onUpdate: Restrict, map: \"fk_album\")\n  song_author             song_author[]\n\n  @@index([album], map: \"fk_album\")\n  @@index([name], map: \"idx_song_name\")\n  @@index([time_played], map: \"idx_song_played\")\n  @@index([view], map: \"idx_song_view\")\n}\n\nmodel song_author {\n  id        Int  @id @default(autoincrement())\n  author_id Int\n  song_id   Int\n  user      user @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: \"song_author_ibfk_1\")\n  song      song @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: \"song_author_ibfk_2\")\n\n  @@index([author_id], map: \"idx_author_id\")\n  @@index([song_id], map: \"song_id\")\n}\n\nmodel user {\n  id                Int            @id @default(autoincrement())\n  username          String         @unique(map: \"username\") @db.VarChar(255)\n  password_hash     String         @db.Char(128)\n  playlists_created Int?           @default(0)\n  token             String?        @db.VarChar(2048)\n  album_author      album_author[]\n  playhistory       playhistory[]\n  playlist          playlist[]\n  song_author       song_author[]\n\n  @@index([username], map: \"idx_username\")\n}\n",
  "inlineSchemaHash": "1735433cd077eb6811c272946e8df6aaea2322b737580dc307430464ae60f768",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"album\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"album_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"album_author\",\"kind\":\"object\",\"type\":\"album_author\",\"relationName\":\"albumToalbum_author\"},{\"name\":\"song_song_albumToalbum\",\"kind\":\"object\",\"type\":\"song\",\"relationName\":\"song_albumToalbum\"}],\"dbName\":null},\"album_author\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"author_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"album_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"album_authorTouser\"},{\"name\":\"album\",\"kind\":\"object\",\"type\":\"album\",\"relationName\":\"albumToalbum_author\"}],\"dbName\":null},\"playhistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"song_played\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"user_recording\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"playhistoryTouser\"},{\"name\":\"song\",\"kind\":\"object\",\"type\":\"song\",\"relationName\":\"playhistoryTosong\"}],\"dbName\":null},\"playlist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_created\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playlist_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"total_time_played\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"total_view\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"playlistTouser\"},{\"name\":\"playlist_song\",\"kind\":\"object\",\"type\":\"playlist_song\",\"relationName\":\"playlistToplaylist_song\"}],\"dbName\":null},\"playlist_song\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playlist_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"song_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playlist\",\"kind\":\"object\",\"type\":\"playlist\",\"relationName\":\"playlistToplaylist_song\"},{\"name\":\"song\",\"kind\":\"object\",\"type\":\"song\",\"relationName\":\"playlist_songTosong\"}],\"dbName\":null},\"song\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"view\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"time_played\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tempo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"genre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year_publish\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"album\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playhistory\",\"kind\":\"object\",\"type\":\"playhistory\",\"relationName\":\"playhistoryTosong\"},{\"name\":\"playlist_song\",\"kind\":\"object\",\"type\":\"playlist_song\",\"relationName\":\"playlist_songTosong\"},{\"name\":\"album_song_albumToalbum\",\"kind\":\"object\",\"type\":\"album\",\"relationName\":\"song_albumToalbum\"},{\"name\":\"song_author\",\"kind\":\"object\",\"type\":\"song_author\",\"relationName\":\"songTosong_author\"}],\"dbName\":null},\"song_author\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"author_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"song_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"user\",\"relationName\":\"song_authorTouser\"},{\"name\":\"song\",\"kind\":\"object\",\"type\":\"song\",\"relationName\":\"songTosong_author\"}],\"dbName\":null},\"user\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password_hash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playlists_created\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"album_author\",\"kind\":\"object\",\"type\":\"album_author\",\"relationName\":\"album_authorTouser\"},{\"name\":\"playhistory\",\"kind\":\"object\",\"type\":\"playhistory\",\"relationName\":\"playhistoryTouser\"},{\"name\":\"playlist\",\"kind\":\"object\",\"type\":\"playlist\",\"relationName\":\"playlistTouser\"},{\"name\":\"song_author\",\"kind\":\"object\",\"type\":\"song_author\",\"relationName\":\"song_authorTouser\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

